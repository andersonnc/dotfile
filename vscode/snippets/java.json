{
  // Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  //ESTRUTURA DE REPETIÇÃO
  "For Aprimorada": {
    "prefix": "for aprimorada",
    "body": [
            "for (${1:Tipo} ${2:obj} : ${3:array}) {",
            "    ${2:obj}",
            "}",
    ],
    "description": "Estrutura de repetição"
  },

  "For": {
    "prefix": "for",
    "body": [
            "for (int ${1:i} = ${2:0}; ${1:i} < ${3:args}.length; ${1:i}++) {",
            "    ${3:args}[${1:i}]",
            "}",
    ],
    "description": "Estrutura de repetição"
  },

  "While": {
      "prefix": "while",
      "body": [
              "while (${1:true}) {",
              "    ${2:}",
              "}",
      ],
      "description": "Estrutura de repetição"
  },

  "Do While": {
    "prefix": "do while",
    "body": [
            "do {",
            "    ${1:}",
            "} while (${2:true});",
    ],
    "description": "Estrutura de repetição"
  },


  //ESTRUTURA SELEÇÃO
  "If": {
    "prefix": "if",
    "body": [
            "if (${1:true}) {",
            "    ${2:}",
            "}",
    ],
    "description": "Estrutura de seleção única"
  },

  "If Else": {
    "prefix": "if else",
    "body": [
            "if (${1:true}) {",
            "    ${2:}",
            "} else {",
            "    ${3:}",
            "}",
    ],
    "description": "Estrutura de seleção dupla"
  },

  "If Else If": {
    "prefix": "if else if",
    "body": [
            "if (${1:true}) {",
            "    ${2:}",
            "} else if (${3:false}) {",
            "    ${4:}",
            "} else {",
            "    ${5:}",
            "}",
    ],
    "description": "Estrutura de seleção múltipla"
  },

  "Operador Ternário": {
    "prefix": "if ternário",
    "body": [
            "(${1:true} ${2:==} ${3:false}) : ${4:} ? ${5:}",
    ],
    "description": "Estrutura de seleção dupla"
  },

  "Switch": {
    "prefix": "switch",
    "body": [
            "switch (${1:}) {",
            "    case ${2:}:",
            "        ${3:}",
            "    break;",
            "    default:",
            "        ${4:}",
            "    break;",
            "}",
    ],
    "description": "Estrutura de seleção múltipla"
  },


  //SAIDA IMPRESSÃO PRADÃO
  "StringBuilder":{
    "prefix": "StringBuilder",
    "body": [
            "StringBuilder ${1:string} = new StringBuilder()${0:;}"
    ],
    "description": "StringBuilder"
  },

  "Printf": {
    "prefix": "printf",
    "body": [
            "System.out.printf(\"${1:}\", ${2:});",
    ],
    "description": "Atalho para o comando System.out.format, exibi na saída padrão uma string formatado"
  },

  "Print": {
    "prefix": "print",
    "body": [
            "System.out.print(${1:});",
    ],
    "description": "Exibir na saída padrão uma string sem quebra de linha"
  },

  "Println": {
    "prefix": "println",
    "body": [
            "System.out.println(${1:});",
    ],
    "description": "Exibir na saída padrão string com quebra de linha"
  },


  // SAÍDA ERRO PADRÃO
  "Print Erro": {
    "prefix": "printerro",
    "body": [
            "System.err.print(${1:});",
    ],
    "description": "Exibir na saída de erro padrão uma string sem quebra de linha"
  },

  "Println Erro": {
    "prefix": "printlnerro",
    "body": [
            "System.err.println(${1:});",
    ],
    "description": "Exibir na saída de erro padrão string com quebra de linha"
  },

  "Printf Erro": {
    "prefix": "printferro",
    "body": [
            "System.err.printf(\"${1:}\", ${2:});",
    ],
    "description": "Atalho para o comando System.err.format, exibi na saída de erro padrão uma string formatado"
  },


  //ESTRUTURA DE DADO
  "ArrayList": {
    "prefix": "lista",
    "body": [
            "ArrayList<${1:Tipo}> ${2:array} = new ArrayList<${1:Tipo}>();",
    ],
    "description": "ArrayList, também conhecido com lista"
  },

  "List": {
    "prefix": "lista",
    "body": [
            "List<${1:Tipo}> ${2:array} = new ArrayList<${1:Tipo}>();",
    ],
    "description": "List, também conhecido com lista interface"
  },


  //TRATAMENTO DE ERRO
  "Assert Simples": {
    "prefix": "assert simples",
    "body": [
            "assert(${1:true} ${2:>} ${3:false});",
    ],
    "description": "Tratamento de erro"
  },

  "Assert Completo": {
    "prefix": "assert completo",
    "body": [
            "assert(${1:true} ${2:>} ${3:false}):\"${4:msg}\";",
    ],
    "description": "Tratamento de erro"
  },

  "Try": {
    "prefix": "try",
    "body": [
            "try {",
            "    ${1:}",
            "} catch (${2:Exception} ${3:error}) {",
            "    ${3:error}.${4:getMessage()};",
            "    ${3:error}.${5:printStackTrace()};",
            "} finally {",
            "    ${6:}",
            "}",
    ],
    "description": "Controle e exceção"
  },

  "Bloco Try Bloco Catch": {
    "prefix": "try catch exception",
    "body": [
            "try {",
            "    ${1:}",
            "} catch (${2:Exception} ${3:error}) {",
            "    ${3:error}.${5:getMessage()};",
            "    ${3:error}.${6:printStackTrace()};",
            "}",
    ],
    "description": "Controle de exceção"
  },

  "Bloco Try Bloco Catch Lista": {
    "prefix": "try catch exception lista",
    "body": [
            "try {",
            "    ${1:}",
            "} catch (${2:Exception} | ${3:Exception} ${4:error}) {",
            "    ${4:error}.${5:getMessage()};",
            "    ${4:error}.${6:printStackTrace()};",
            "}",
    ],
    "description": "Controle de exceção"
  },

  "Bloco Try Bloco Catch Thowble": {
    "prefix": "try catch thowble",
    "body": [
            "try {",
            "    ${1:}",
            "} catch (${2:Throwable} ${3:error}) {",
            "    ${3:error}.${4:getMessage()};",
            "    ${3:error}.${5:printStackTrace()};",
            "}",
    ],
    "description": "Controle de exceção genérica"
  },


  //CLASSE
  "Class Simples": {
    "prefix": "class simple",
    "body": [
            "package ${1:pacote};",
            "",
            "public class ${2:}",
            "{",
            "    private ${3:Tipo} ${4:variavel};",
            "",
            "    public ${2:}()",
            "    {",
            "        this(${4:parametro});",
            "    }",
            "}",
    ],
    "description": "Declaração da classe curta"
  },
  "Classe Abstrata": {
    "prefix": "class abstract",
    "body": [
            "package ${1:pacote};",
            "",
            "public abstract class ${2:}",
            "{",
            "    privado ${3:Tipo} ${4:variavel}",
            "",
            "    public ${2:}()",
            "    {",
            "        ${5:}",
            "    }",
            "",
            "    public abstract ${6:Tipo} ${7:}();",
            "}",
    ],
    "description": "Declaração da classe abstrata"
  },

  "Class Herança": {
    "prefix": "class herança",
    "body": [
            "package ${1:pacote};",
            "",
            "public class ${2:} extends ${3:}",
            "{",
            "    private ${4:Tipo} ${5:variavel};",
            "",
            "    public ${2:}()",
            "    {",
            "        this(${5:parametro});",
            "    }",
            "}",
    ],
    "description": "Declaração da classe com herança"
  },

  "Class Completa": {
    "prefix": "class completa",
    "body": [
            "package ${1:pacote};",
            "",
            "public class ${2:} extends ${3:} implements ${4:}",
            "{",
            "    private ${5:Tipo} ${6:variavel};",
            "",
            "    public ${2:}()",
            "    {",
            "        this(${6:parametro});",
            "    }",
            "}",
    ],
    "description": "Declaração da classe com herança e interface completa"
  },


  //MÉTODO PADRÃO
  "Get": {
    "prefix": "metodo get",
    "body": [
            "public ${1:} get${2:}(){ return this.${3:variavel}; }",
    ],
    "description": "Método get"
  },
  "Set": {
    "prefix": "metodo set",
    "body": [
            "public void set${1:}(${2:Tipo} ${3:parametro}){ this.${3:parametro} = ${3:parametro}; }",
    ],
    "description": "Método set"
  },
  "Is": {
    "prefix": "metodo is",
    "body": [
            "public Boolean is${1:}(){ return this.${2:variavel}; }",
    ],
    "description": "Método is, retorna um booleano"
  },

  "ToString": {
    "prefix": "metodo toString",
    "body": [
            "@Override",
            "public String toString()",
            "{",
            "    return String.format(\"%${1:}\",${2:flag});",
            "}",
    ],
    "description": "Método toString, retorno uma string no objeto"
  },


  //INTERFACE
  "Interface Simple": {
    "prefix": "interface simples",
    "body": [
            "package ${1:pacote};",
            "",
            "public interface ${2:}",
            "{",
            "    public final ${3:Tipo} ${4:constante};",
            "",
            "    public abstract void ${5:}();",
            "}",
    ],
    "description": "Interface simple"
  },

  "Interface Herança": {
    "prefix": "interface herança",
    "body": [
            "package ${1:pacote};",
            "",
            "public interface ${2:} extends ${3:}",
            "{",
            "    public final ${4:Tipo} ${5:constante};",
            "",
            "    public abstract void ${6:}();",
            "}",
    ],
    "description": "Interface com herança"
  },


  //ENUM
  "Enum Simples": {
    "prefix": "enum simple",
    "body": [
            "package ${1:enuns};",
            "",
            "public enum ${2:}",
            "{",
            "    ${3:CONSTANTES}",
            "}",
    ],
    "description": "Enumeradores simples"
  },

  "Enum Completa": {
    "prefix": "enum completa",
    "body": [
            "package ${1:enuns};",
            "",
            "public enum ${2:}",
            "{",
            "    ${3:CONSTANTES};",
            "",
            "    private ${4:Tipo} ${5:variavel};",
            "",
            "    ${2:}(${4:Tipo} ${5:parametro})",
            "    {",
            "        this.${5:} = ${5:};",
            "    }",
            "}",
    ],
    "description": "Enumeradores completa"
  },


  //INSTÂNCIA DA CLASSE
  "Objeto": {
    "prefix": "objeto",
    "body": [
            "${1:Classe} ${2:objeto} = new ${1:Classe}();",
    ],
    "description": "Instância de uma entidade"
  },

  "Objeto Construtor": {
    "prefix": "objeto construtor",
    "body": [
            "${1:Classe} ${2:objeto} = new ${1:Classe}(${3:parametro});",
    ],
    "description": "Instância de uma entidade, mais o construtor"
  },


   // FUNÇÃO AUXILIAR
   "Main": {
    "prefix": "main",
    "body": [
            "package ${1:app};",
            "",
            "public class Index",
            "{",
            "    public static void main(String[] args)",
            "    {",
            "        ${2:}",
            "    }",
            "}",
    ],
    "description": "Classe main"
  },

  "Current Time Millis": {
    "prefix": "cronometro",
    "body": [
            "double ${1:tempo} = System.currentTimeMillis();",
    ],
    "description": "Cronômetro java, retorna um LONG ou DOUBLE"
  },

  "System.exit": {
    "prefix": "exit",
    "body": [
            "System.exit(${1:0});",
    ],
    "description": "Terminar o programa no mesmo momento que o a funçao e chamada"
  }
}
